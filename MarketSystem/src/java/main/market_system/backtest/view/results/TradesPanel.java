/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package market_system.backtest.view.results;

import java.awt.Color;
import java.awt.Component;
import java.time.LocalDateTime;
import java.util.List;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import market_system.backtest.BackTest;
import market_system.backtest.broker.Deal;
import market_system.backtest.broker.Position;
import market_system.backtest.broker.Trade;
import market_system.backtest.stats.BackTestStats;
import market_system.backtest.stats.TradesStats;
/**
 *
 * @author Fabrizio Ortega
 */
public class TradesPanel extends javax.swing.JPanel implements ResultsObserver {
    JTable table;
    TradesTableModel tableModel;
    /**
     * Creates new form TradesPanel
     */
    public TradesPanel() {
        initComponents();
    }
    public TradesPanel(BackTest backtest) {
        for(BackTestStats s:backtest.getStatsObservers()) {
            if(s instanceof TradesStats) {
                    ((TradesStats)s).setTradesPanelObserver(this);
            }
        }
        tableModel = new TradesTableModel();
        table = new JTable(tableModel);
        table.getColumnModel().getColumn(7).setCellRenderer(new ColorCellRenderer());
        //table.setMaximumSize(new java.awt.Dimension(2174, 263));
        //table.setMinimumSize(new java.awt.Dimension(2174, 263));
        //table.setPreferredSize(new java.awt.Dimension(2174, 263));
        
        //table.setPreferredScrollableViewportSize( new java.awt.Dimension(2174, 263));
        //table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        initComponents();
        table.setFillsViewportHeight(true);
       
    }
    private static class ColorCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // Obtener el valor de la celda
            Double v = (Double) value;
            if(v>0d){
                cellComponent.setBackground(Color.GREEN);
            }
            else if(v<0d){
                cellComponent.setBackground(Color.RED);
            }
            else{
                cellComponent.setBackground(table.getBackground());
            }
       

            return cellComponent;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane(table);

        setMaximumSize(new java.awt.Dimension(2174, 263));
        setMinimumSize(new java.awt.Dimension(2174, 263));
        setPreferredSize(new java.awt.Dimension(2174, 263));
        setLayout(new java.awt.BorderLayout());

        jScrollPane2.setMaximumSize(new java.awt.Dimension(2174, 263));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(2174, 263));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(2174, 263));
        add(jScrollPane2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

   
	@Override
	public void update(LocalDateTime date, Position position, List<Deal> deals, List<Trade> otrades) {
		if(this.tableModel.update(deals,otrades)){
            this.repaint();
        }
	}
}
