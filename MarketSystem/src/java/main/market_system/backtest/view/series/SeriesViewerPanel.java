/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package market_system.backtest.view.series;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

import market_system.backtest.BackTest;
import market_system.backtest.broker.Broker;
import market_system.backtest.broker.Client;
import market_system.backtest.data.CandleData;
import market_system.backtest.data.MarketData;
import market_system.backtest.util.Util;

/**
 *
 * @author Fabrizio Ortega
 */
public class SeriesViewerPanel extends javax.swing.JPanel {
	static double height = 466,width=1219;
	Graphics2D g2;
	BufferedImage bufferImage;

    /**
     * Creates new form SeriesViewerPanel
     */
    public SeriesViewerPanel() {
        initComponents();
        bufferImage = new BufferedImage((int)width, (int)height, BufferedImage.TYPE_4BYTE_ABGR);
        g2=bufferImage.createGraphics();
        
		MarketData md = new MarketData("resources/data/EURUSDr.csv");
		paintRange(md,0,3);
    }
    
    public void paintRange(MarketData data, int ini, int end) {
    	double max=0d,min=0d;
    	for(int i=ini;i<end;i++) {
    		max=Math.max(max, data.get(i).high);
    		min=Math.min(min, data.get(i).low);
    	}
    	
		g2.setColor(Color.WHITE);
    	g2.fillRect(0, 0, (int)width, (int)height);
    	int i=0;
    	for(CandleData cd:data) {
    		double open = Util.map(cd.open,max,min)*height;
    		double close = Util.map(cd.close,max,min)*height;
    		double high = Util.map(cd.high,max,min)*height;
    		double low = Util.map(cd.low,max,min)*height;
    		double candleBody = Math.abs(open-close);
    		//System.out.println("candle2: "+open+" "+close);
    		
    		double shift = i*8d;
    		double candleWidth = 5d;
    		g2.setColor(Color.BLACK);
    		g2.drawLine((int)(shift+candleWidth/2), (int)low, (int)(shift+candleWidth/2), (int)high);
    		if(cd.close >= cd.open){//bull
    			g2.setColor(Color.RED);
    			g2.fillRect((int)shift, (int)(close), (int)candleWidth, (int)candleBody);
    			
    		}
    		else {//bear
    			g2.setColor(Color.RED);
    			g2.fillRect((int)shift, (int)(open), (int)candleWidth, (int)candleBody);

    		}
    		i++;
    	}

    }
    @Override
    public void paintComponent(Graphics g) {
    	g.drawImage(bufferImage, 0, 0, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(1219, 466));
        setMinimumSize(new java.awt.Dimension(1219, 466));
        setPreferredSize(new java.awt.Dimension(1219, 466));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1219, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
